{"version":3,"file":"inference-session-impl.js","sources":["../../../../../../../../node_modules/.pnpm/onnxruntime-common@1.20.1/node_modules/onnxruntime-common/dist/esm/inference-session-impl.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { resolveBackendAndExecutionProviders } from './backend-impl.js';\nimport { Tensor } from './tensor.js';\nimport { TRACE_FUNC_BEGIN, TRACE_FUNC_END } from './trace.js';\nexport class InferenceSession {\n    constructor(handler) {\n        this.handler = handler;\n    }\n    async run(feeds, arg1, arg2) {\n        TRACE_FUNC_BEGIN();\n        const fetches = {};\n        let options = {};\n        // check inputs\n        if (typeof feeds !== 'object' || feeds === null || feeds instanceof Tensor || Array.isArray(feeds)) {\n            throw new TypeError(\"'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.\");\n        }\n        let isFetchesEmpty = true;\n        // determine which override is being used\n        if (typeof arg1 === 'object') {\n            if (arg1 === null) {\n                throw new TypeError('Unexpected argument[1]: cannot be null.');\n            }\n            if (arg1 instanceof Tensor) {\n                throw new TypeError(\"'fetches' cannot be a Tensor\");\n            }\n            if (Array.isArray(arg1)) {\n                if (arg1.length === 0) {\n                    throw new TypeError(\"'fetches' cannot be an empty array.\");\n                }\n                isFetchesEmpty = false;\n                // output names\n                for (const name of arg1) {\n                    if (typeof name !== 'string') {\n                        throw new TypeError(\"'fetches' must be a string array or an object.\");\n                    }\n                    if (this.outputNames.indexOf(name) === -1) {\n                        throw new RangeError(`'fetches' contains invalid output name: ${name}.`);\n                    }\n                    fetches[name] = null;\n                }\n                if (typeof arg2 === 'object' && arg2 !== null) {\n                    options = arg2;\n                }\n                else if (typeof arg2 !== 'undefined') {\n                    throw new TypeError(\"'options' must be an object.\");\n                }\n            }\n            else {\n                // decide whether arg1 is fetches or options\n                // if any output name is present and its value is valid OnnxValue, we consider it fetches\n                let isFetches = false;\n                const arg1Keys = Object.getOwnPropertyNames(arg1);\n                for (const name of this.outputNames) {\n                    if (arg1Keys.indexOf(name) !== -1) {\n                        const v = arg1[name];\n                        if (v === null || v instanceof Tensor) {\n                            isFetches = true;\n                            isFetchesEmpty = false;\n                            fetches[name] = v;\n                        }\n                    }\n                }\n                if (isFetches) {\n                    if (typeof arg2 === 'object' && arg2 !== null) {\n                        options = arg2;\n                    }\n                    else if (typeof arg2 !== 'undefined') {\n                        throw new TypeError(\"'options' must be an object.\");\n                    }\n                }\n                else {\n                    options = arg1;\n                }\n            }\n        }\n        else if (typeof arg1 !== 'undefined') {\n            throw new TypeError(\"Unexpected argument[1]: must be 'fetches' or 'options'.\");\n        }\n        // check if all inputs are in feed\n        for (const name of this.inputNames) {\n            if (typeof feeds[name] === 'undefined') {\n                throw new Error(`input '${name}' is missing in 'feeds'.`);\n            }\n        }\n        // if no fetches is specified, we use the full output names list\n        if (isFetchesEmpty) {\n            for (const name of this.outputNames) {\n                fetches[name] = null;\n            }\n        }\n        // feeds, fetches and options are prepared\n        const results = await this.handler.run(feeds, fetches, options);\n        const returnValue = {};\n        for (const key in results) {\n            if (Object.hasOwnProperty.call(results, key)) {\n                const result = results[key];\n                if (result instanceof Tensor) {\n                    returnValue[key] = result;\n                }\n                else {\n                    returnValue[key] = new Tensor(result.type, result.data, result.dims);\n                }\n            }\n        }\n        TRACE_FUNC_END();\n        return returnValue;\n    }\n    async release() {\n        return this.handler.dispose();\n    }\n    static async create(arg0, arg1, arg2, arg3) {\n        TRACE_FUNC_BEGIN();\n        // either load from a file or buffer\n        let filePathOrUint8Array;\n        let options = {};\n        if (typeof arg0 === 'string') {\n            filePathOrUint8Array = arg0;\n            if (typeof arg1 === 'object' && arg1 !== null) {\n                options = arg1;\n            }\n            else if (typeof arg1 !== 'undefined') {\n                throw new TypeError(\"'options' must be an object.\");\n            }\n        }\n        else if (arg0 instanceof Uint8Array) {\n            filePathOrUint8Array = arg0;\n            if (typeof arg1 === 'object' && arg1 !== null) {\n                options = arg1;\n            }\n            else if (typeof arg1 !== 'undefined') {\n                throw new TypeError(\"'options' must be an object.\");\n            }\n        }\n        else if (arg0 instanceof ArrayBuffer ||\n            (typeof SharedArrayBuffer !== 'undefined' && arg0 instanceof SharedArrayBuffer)) {\n            const buffer = arg0;\n            let byteOffset = 0;\n            let byteLength = arg0.byteLength;\n            if (typeof arg1 === 'object' && arg1 !== null) {\n                options = arg1;\n            }\n            else if (typeof arg1 === 'number') {\n                byteOffset = arg1;\n                if (!Number.isSafeInteger(byteOffset)) {\n                    throw new RangeError(\"'byteOffset' must be an integer.\");\n                }\n                if (byteOffset < 0 || byteOffset >= buffer.byteLength) {\n                    throw new RangeError(`'byteOffset' is out of range [0, ${buffer.byteLength}).`);\n                }\n                byteLength = arg0.byteLength - byteOffset;\n                if (typeof arg2 === 'number') {\n                    byteLength = arg2;\n                    if (!Number.isSafeInteger(byteLength)) {\n                        throw new RangeError(\"'byteLength' must be an integer.\");\n                    }\n                    if (byteLength <= 0 || byteOffset + byteLength > buffer.byteLength) {\n                        throw new RangeError(`'byteLength' is out of range (0, ${buffer.byteLength - byteOffset}].`);\n                    }\n                    if (typeof arg3 === 'object' && arg3 !== null) {\n                        options = arg3;\n                    }\n                    else if (typeof arg3 !== 'undefined') {\n                        throw new TypeError(\"'options' must be an object.\");\n                    }\n                }\n                else if (typeof arg2 !== 'undefined') {\n                    throw new TypeError(\"'byteLength' must be a number.\");\n                }\n            }\n            else if (typeof arg1 !== 'undefined') {\n                throw new TypeError(\"'options' must be an object.\");\n            }\n            filePathOrUint8Array = new Uint8Array(buffer, byteOffset, byteLength);\n        }\n        else {\n            throw new TypeError(\"Unexpected argument[0]: must be 'path' or 'buffer'.\");\n        }\n        // resolve backend, update session options with validated EPs, and create session handler\n        const [backend, optionsWithValidatedEPs] = await resolveBackendAndExecutionProviders(options);\n        const handler = await backend.createInferenceSessionHandler(filePathOrUint8Array, optionsWithValidatedEPs);\n        TRACE_FUNC_END();\n        return new InferenceSession(handler);\n    }\n    startProfiling() {\n        this.handler.startProfiling();\n    }\n    endProfiling() {\n        this.handler.endProfiling();\n    }\n    get inputNames() {\n        return this.handler.inputNames;\n    }\n    get outputNames() {\n        return this.handler.outputNames;\n    }\n}\n//# sourceMappingURL=inference-session-impl.js.map"],"names":[],"mappings":"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","x_google_ignoreList":[0]}