{"version":3,"file":"tensor-factory-impl.js","sources":["../../../../../../../../node_modules/.pnpm/onnxruntime-common@1.20.1/node_modules/onnxruntime-common/dist/esm/tensor-factory-impl.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { Tensor } from './tensor-impl.js';\n/**\n * Create a new tensor object from image object\n *\n * @param buffer - Extracted image buffer data - assuming RGBA format\n * @param imageFormat - input image configuration - required configurations height, width, format\n * @param tensorFormat - output tensor configuration - Default is RGB format\n */\nexport const bufferToTensor = (buffer, options) => {\n    if (buffer === undefined) {\n        throw new Error('Image buffer must be defined');\n    }\n    if (options.height === undefined || options.width === undefined) {\n        throw new Error('Image height and width must be defined');\n    }\n    if (options.tensorLayout === 'NHWC') {\n        throw new Error('NHWC Tensor layout is not supported yet');\n    }\n    const { height, width } = options;\n    const norm = options.norm ?? { mean: 255, bias: 0 };\n    let normMean;\n    let normBias;\n    if (typeof norm.mean === 'number') {\n        normMean = [norm.mean, norm.mean, norm.mean, norm.mean];\n    }\n    else {\n        normMean = [norm.mean[0], norm.mean[1], norm.mean[2], norm.mean[3] ?? 255];\n    }\n    if (typeof norm.bias === 'number') {\n        normBias = [norm.bias, norm.bias, norm.bias, norm.bias];\n    }\n    else {\n        normBias = [norm.bias[0], norm.bias[1], norm.bias[2], norm.bias[3] ?? 0];\n    }\n    const inputformat = options.format !== undefined ? options.format : 'RGBA';\n    // default value is RGBA since imagedata and HTMLImageElement uses it\n    const outputformat = options.tensorFormat !== undefined ? (options.tensorFormat !== undefined ? options.tensorFormat : 'RGB') : 'RGB';\n    const stride = height * width;\n    const float32Data = outputformat === 'RGBA' ? new Float32Array(stride * 4) : new Float32Array(stride * 3);\n    // Default pointer assignments\n    let step = 4, rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;\n    let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;\n    // Updating the pointer assignments based on the input image format\n    if (inputformat === 'RGB') {\n        step = 3;\n        rImagePointer = 0;\n        gImagePointer = 1;\n        bImagePointer = 2;\n        aImagePointer = -1;\n    }\n    // Updating the pointer assignments based on the output tensor format\n    if (outputformat === 'RGBA') {\n        aTensorPointer = stride * 3;\n    }\n    else if (outputformat === 'RBG') {\n        rTensorPointer = 0;\n        bTensorPointer = stride;\n        gTensorPointer = stride * 2;\n    }\n    else if (outputformat === 'BGR') {\n        bTensorPointer = 0;\n        gTensorPointer = stride;\n        rTensorPointer = stride * 2;\n    }\n    for (let i = 0; i < stride; i++, rImagePointer += step, bImagePointer += step, gImagePointer += step, aImagePointer += step) {\n        float32Data[rTensorPointer++] = (buffer[rImagePointer] + normBias[0]) / normMean[0];\n        float32Data[gTensorPointer++] = (buffer[gImagePointer] + normBias[1]) / normMean[1];\n        float32Data[bTensorPointer++] = (buffer[bImagePointer] + normBias[2]) / normMean[2];\n        if (aTensorPointer !== -1 && aImagePointer !== -1) {\n            float32Data[aTensorPointer++] = (buffer[aImagePointer] + normBias[3]) / normMean[3];\n        }\n    }\n    // Float32Array -> ort.Tensor\n    const outputTensor = outputformat === 'RGBA'\n        ? new Tensor('float32', float32Data, [1, 4, height, width])\n        : new Tensor('float32', float32Data, [1, 3, height, width]);\n    return outputTensor;\n};\n/**\n * implementation of Tensor.fromImage().\n */\nexport const tensorFromImage = async (image, options) => {\n    // checking the type of image object\n    const isHTMLImageEle = typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement;\n    const isImageDataEle = typeof ImageData !== 'undefined' && image instanceof ImageData;\n    const isImageBitmap = typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap;\n    const isString = typeof image === 'string';\n    let data;\n    let bufferToTensorOptions = options ?? {};\n    const createCanvas = () => {\n        if (typeof document !== 'undefined') {\n            return document.createElement('canvas');\n        }\n        else if (typeof OffscreenCanvas !== 'undefined') {\n            return new OffscreenCanvas(1, 1);\n        }\n        else {\n            throw new Error('Canvas is not supported');\n        }\n    };\n    const createCanvasContext = (canvas) => {\n        if (typeof HTMLCanvasElement !== 'undefined' && canvas instanceof HTMLCanvasElement) {\n            return canvas.getContext('2d');\n        }\n        else if (canvas instanceof OffscreenCanvas) {\n            return canvas.getContext('2d');\n        }\n        else {\n            return null;\n        }\n    };\n    // filling and checking image configuration options\n    if (isHTMLImageEle) {\n        // HTMLImageElement - image object - format is RGBA by default\n        const canvas = createCanvas();\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const pixels2DContext = createCanvasContext(canvas);\n        if (pixels2DContext != null) {\n            let height = image.height;\n            let width = image.width;\n            if (options !== undefined && options.resizedHeight !== undefined && options.resizedWidth !== undefined) {\n                height = options.resizedHeight;\n                width = options.resizedWidth;\n            }\n            if (options !== undefined) {\n                bufferToTensorOptions = options;\n                if (options.tensorFormat !== undefined) {\n                    throw new Error('Image input config format must be RGBA for HTMLImageElement');\n                }\n                else {\n                    bufferToTensorOptions.tensorFormat = 'RGBA';\n                }\n                bufferToTensorOptions.height = height;\n                bufferToTensorOptions.width = width;\n            }\n            else {\n                bufferToTensorOptions.tensorFormat = 'RGBA';\n                bufferToTensorOptions.height = height;\n                bufferToTensorOptions.width = width;\n            }\n            pixels2DContext.drawImage(image, 0, 0);\n            data = pixels2DContext.getImageData(0, 0, width, height).data;\n        }\n        else {\n            throw new Error('Can not access image data');\n        }\n    }\n    else if (isImageDataEle) {\n        let height;\n        let width;\n        if (options !== undefined && options.resizedWidth !== undefined && options.resizedHeight !== undefined) {\n            height = options.resizedHeight;\n            width = options.resizedWidth;\n        }\n        else {\n            height = image.height;\n            width = image.width;\n        }\n        if (options !== undefined) {\n            bufferToTensorOptions = options;\n        }\n        bufferToTensorOptions.format = 'RGBA';\n        bufferToTensorOptions.height = height;\n        bufferToTensorOptions.width = width;\n        if (options !== undefined) {\n            const tempCanvas = createCanvas();\n            tempCanvas.width = width;\n            tempCanvas.height = height;\n            const pixels2DContext = createCanvasContext(tempCanvas);\n            if (pixels2DContext != null) {\n                pixels2DContext.putImageData(image, 0, 0);\n                data = pixels2DContext.getImageData(0, 0, width, height).data;\n            }\n            else {\n                throw new Error('Can not access image data');\n            }\n        }\n        else {\n            data = image.data;\n        }\n    }\n    else if (isImageBitmap) {\n        // ImageBitmap - image object - format must be provided by user\n        if (options === undefined) {\n            throw new Error('Please provide image config with format for Imagebitmap');\n        }\n        const canvas = createCanvas();\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const pixels2DContext = createCanvasContext(canvas);\n        if (pixels2DContext != null) {\n            const height = image.height;\n            const width = image.width;\n            pixels2DContext.drawImage(image, 0, 0, width, height);\n            data = pixels2DContext.getImageData(0, 0, width, height).data;\n            bufferToTensorOptions.height = height;\n            bufferToTensorOptions.width = width;\n            return bufferToTensor(data, bufferToTensorOptions);\n        }\n        else {\n            throw new Error('Can not access image data');\n        }\n    }\n    else if (isString) {\n        return new Promise((resolve, reject) => {\n            const canvas = createCanvas();\n            const context = createCanvasContext(canvas);\n            if (!image || !context) {\n                return reject();\n            }\n            const newImage = new Image();\n            newImage.crossOrigin = 'Anonymous';\n            newImage.src = image;\n            newImage.onload = () => {\n                canvas.width = newImage.width;\n                canvas.height = newImage.height;\n                context.drawImage(newImage, 0, 0, canvas.width, canvas.height);\n                const img = context.getImageData(0, 0, canvas.width, canvas.height);\n                bufferToTensorOptions.height = canvas.height;\n                bufferToTensorOptions.width = canvas.width;\n                resolve(bufferToTensor(img.data, bufferToTensorOptions));\n            };\n        });\n    }\n    else {\n        throw new Error('Input data provided is not supported - aborted tensor creation');\n    }\n    if (data !== undefined) {\n        return bufferToTensor(data, bufferToTensorOptions);\n    }\n    else {\n        throw new Error('Input data provided is not supported - aborted tensor creation');\n    }\n};\n/**\n * implementation of Tensor.fromTexture().\n */\nexport const tensorFromTexture = (texture, options) => {\n    const { width, height, download, dispose } = options;\n    // Always assume RGBAF32. TODO: support different texture format\n    const dims = [1, height, width, 4];\n    return new Tensor({ location: 'texture', type: 'float32', texture, dims, download, dispose });\n};\n/**\n * implementation of Tensor.fromGpuBuffer().\n */\nexport const tensorFromGpuBuffer = (gpuBuffer, options) => {\n    const { dataType, dims, download, dispose } = options;\n    return new Tensor({ location: 'gpu-buffer', type: dataType ?? 'float32', gpuBuffer, dims, download, dispose });\n};\n/**\n * implementation of Tensor.fromMLTensor().\n */\nexport const tensorFromMLTensor = (mlTensor, options) => {\n    const { dataType, dims, download, dispose } = options;\n    return new Tensor({ location: 'ml-tensor', type: dataType ?? 'float32', mlTensor, dims, download, dispose });\n};\n/**\n * implementation of Tensor.fromPinnedBuffer().\n */\nexport const tensorFromPinnedBuffer = (type, buffer, dims) => new Tensor({ location: 'cpu-pinned', type, data: buffer, dims: dims ?? [buffer.length] });\n//# sourceMappingURL=tensor-factory-impl.js.map"],"names":[],"mappings":"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","x_google_ignoreList":[0]}