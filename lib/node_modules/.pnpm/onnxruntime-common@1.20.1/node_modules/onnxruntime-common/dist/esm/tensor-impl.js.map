{"version":3,"file":"tensor-impl.js","sources":["../../../../../../../../node_modules/.pnpm/onnxruntime-common@1.20.1/node_modules/onnxruntime-common/dist/esm/tensor-impl.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { tensorToDataURL, tensorToImageData } from './tensor-conversion-impl.js';\nimport { tensorFromGpuBuffer, tensorFromImage, tensorFromMLTensor, tensorFromPinnedBuffer, tensorFromTexture, } from './tensor-factory-impl.js';\nimport { checkTypedArray, NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP, NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP, } from './tensor-impl-type-mapping.js';\nimport { calculateSize, tensorReshape } from './tensor-utils-impl.js';\n/**\n * the implementation of Tensor interface.\n *\n * @ignore\n */\nexport class Tensor {\n    /**\n     * implementation.\n     */\n    constructor(arg0, arg1, arg2) {\n        // perform one-time check for BigInt/Float16Array support\n        checkTypedArray();\n        let type;\n        let dims;\n        if (typeof arg0 === 'object' && 'location' in arg0) {\n            //\n            // constructing tensor from specific location\n            //\n            this.dataLocation = arg0.location;\n            type = arg0.type;\n            dims = arg0.dims;\n            switch (arg0.location) {\n                case 'cpu-pinned': {\n                    const expectedTypedArrayConstructor = NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(type);\n                    if (!expectedTypedArrayConstructor) {\n                        throw new TypeError(`unsupported type \"${type}\" to create tensor from pinned buffer`);\n                    }\n                    if (!(arg0.data instanceof expectedTypedArrayConstructor)) {\n                        throw new TypeError(`buffer should be of type ${expectedTypedArrayConstructor.name}`);\n                    }\n                    this.cpuData = arg0.data;\n                    break;\n                }\n                case 'texture': {\n                    if (type !== 'float32') {\n                        throw new TypeError(`unsupported type \"${type}\" to create tensor from texture`);\n                    }\n                    this.gpuTextureData = arg0.texture;\n                    this.downloader = arg0.download;\n                    this.disposer = arg0.dispose;\n                    break;\n                }\n                case 'gpu-buffer': {\n                    if (type !== 'float32' &&\n                        type !== 'float16' &&\n                        type !== 'int32' &&\n                        type !== 'int64' &&\n                        type !== 'uint32' &&\n                        type !== 'uint8' &&\n                        type !== 'bool' &&\n                        type !== 'uint4' &&\n                        type !== 'int4') {\n                        throw new TypeError(`unsupported type \"${type}\" to create tensor from gpu buffer`);\n                    }\n                    this.gpuBufferData = arg0.gpuBuffer;\n                    this.downloader = arg0.download;\n                    this.disposer = arg0.dispose;\n                    break;\n                }\n                case 'ml-tensor': {\n                    if (type !== 'float32' &&\n                        type !== 'float16' &&\n                        type !== 'int32' &&\n                        type !== 'int64' &&\n                        type !== 'uint32' &&\n                        type !== 'uint64' &&\n                        type !== 'int8' &&\n                        type !== 'uint8' &&\n                        type !== 'bool') {\n                        throw new TypeError(`unsupported type \"${type}\" to create tensor from MLTensor`);\n                    }\n                    this.mlTensorData = arg0.mlTensor;\n                    this.downloader = arg0.download;\n                    this.disposer = arg0.dispose;\n                    break;\n                }\n                default:\n                    throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`);\n            }\n        }\n        else {\n            //\n            // constructing tensor of location 'cpu'\n            //\n            let data;\n            let maybeDims;\n            // check whether arg0 is type or data\n            if (typeof arg0 === 'string') {\n                //\n                // Override: constructor(type, data, ...)\n                //\n                type = arg0;\n                maybeDims = arg2;\n                if (arg0 === 'string') {\n                    // string tensor\n                    if (!Array.isArray(arg1)) {\n                        throw new TypeError(\"A string tensor's data must be a string array.\");\n                    }\n                    // we don't check whether every element in the array is string; this is too slow. we assume it's correct and\n                    // error will be populated at inference\n                    data = arg1;\n                }\n                else {\n                    // numeric tensor\n                    const typedArrayConstructor = NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(arg0);\n                    if (typedArrayConstructor === undefined) {\n                        throw new TypeError(`Unsupported tensor type: ${arg0}.`);\n                    }\n                    if (Array.isArray(arg1)) {\n                        if ((arg0 === 'float16' && typedArrayConstructor === Uint16Array) || arg0 === 'uint4' || arg0 === 'int4') {\n                            // - 'float16':\n                            //   When no Float16Array polyfill is used, we cannot create 'float16' tensor from number array.\n                            //\n                            //   Throw error here because when user try to use number array as data,\n                            //   e.g. new Tensor('float16', [1, 2, 3, 4], dims)), it will actually call\n                            //   Uint16Array.from(arg1) which generates wrong data.\n                            //\n                            // - 'uint4' and 'int4':\n                            //   Uint8Array.from(arg1) will generate wrong data for 'uint4' and 'int4' tensor.\n                            //\n                            throw new TypeError(`Creating a ${arg0} tensor from number array is not supported. Please use ${typedArrayConstructor.name} as data.`);\n                        }\n                        else if (arg0 === 'uint64' || arg0 === 'int64') {\n                            // use 'as any' here because:\n                            // 1. TypeScript's check on type of 'Array.isArray()' does not work with readonly arrays.\n                            // see https://github.com/microsoft/TypeScript/issues/17002\n                            // 2. TypeScript's check on union type of '(BigInt64ArrayConstructor|BigUint64ArrayConstructor).from()'\n                            // does not accept parameter mapFn.\n                            // 3. parameters of 'SupportedTypedArrayConstructors.from()' does not match the requirement of the union\n                            // type.\n                            // assume 'arg1' is of type \"readonly number[]|readonly bigint[]\" here.\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                            data = typedArrayConstructor.from(arg1, BigInt);\n                        }\n                        else {\n                            // assume 'arg1' is of type \"readonly number[]\" here.\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                            data = typedArrayConstructor.from(arg1);\n                        }\n                    }\n                    else if (arg1 instanceof typedArrayConstructor) {\n                        data = arg1;\n                    }\n                    else if (arg1 instanceof Uint8ClampedArray) {\n                        if (arg0 === 'uint8') {\n                            data = Uint8Array.from(arg1);\n                        }\n                        else {\n                            throw new TypeError(`A Uint8ClampedArray tensor's data must be type of uint8`);\n                        }\n                    }\n                    else {\n                        throw new TypeError(`A ${type} tensor's data must be type of ${typedArrayConstructor}`);\n                    }\n                }\n            }\n            else {\n                //\n                // Override: constructor(data, ...)\n                //\n                maybeDims = arg1;\n                if (Array.isArray(arg0)) {\n                    // only boolean[] and string[] is supported\n                    if (arg0.length === 0) {\n                        throw new TypeError('Tensor type cannot be inferred from an empty array.');\n                    }\n                    const firstElementType = typeof arg0[0];\n                    if (firstElementType === 'string') {\n                        type = 'string';\n                        data = arg0;\n                    }\n                    else if (firstElementType === 'boolean') {\n                        type = 'bool';\n                        // 'arg0' is of type 'boolean[]'. Uint8Array.from(boolean[]) actually works, but typescript thinks this is\n                        // wrong type. We use 'as any' to make it happy.\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        data = Uint8Array.from(arg0);\n                    }\n                    else {\n                        throw new TypeError(`Invalid element type of data array: ${firstElementType}.`);\n                    }\n                }\n                else if (arg0 instanceof Uint8ClampedArray) {\n                    type = 'uint8';\n                    data = Uint8Array.from(arg0);\n                }\n                else {\n                    // get tensor type from TypedArray\n                    const mappedType = NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.get(arg0.constructor);\n                    if (mappedType === undefined) {\n                        throw new TypeError(`Unsupported type for tensor data: ${arg0.constructor}.`);\n                    }\n                    type = mappedType;\n                    data = arg0;\n                }\n            }\n            // type and data is processed, now processing dims\n            if (maybeDims === undefined) {\n                // assume 1-D tensor if dims omitted\n                maybeDims = [data.length];\n            }\n            else if (!Array.isArray(maybeDims)) {\n                throw new TypeError(\"A tensor's dims must be a number array\");\n            }\n            dims = maybeDims;\n            this.cpuData = data;\n            this.dataLocation = 'cpu';\n        }\n        // perform check on dims\n        const size = calculateSize(dims);\n        // if data is on CPU, check whether data length matches tensor size\n        if (this.cpuData && size !== this.cpuData.length) {\n            if ((type === 'uint4' || type === 'int4') && Math.ceil(size / 2) === this.cpuData.length) {\n                // for (u)int4, the data length is half of the tensor size. So we check this special case when size is odd.\n            }\n            else {\n                throw new Error(`Tensor's size(${size}) does not match data length(${this.cpuData.length}).`);\n            }\n        }\n        this.type = type;\n        this.dims = dims;\n        this.size = size;\n    }\n    // #endregion\n    // #region factory\n    static async fromImage(image, options) {\n        return tensorFromImage(image, options);\n    }\n    static fromTexture(texture, options) {\n        return tensorFromTexture(texture, options);\n    }\n    static fromGpuBuffer(gpuBuffer, options) {\n        return tensorFromGpuBuffer(gpuBuffer, options);\n    }\n    static fromMLTensor(mlTensor, options) {\n        return tensorFromMLTensor(mlTensor, options);\n    }\n    static fromPinnedBuffer(type, buffer, dims) {\n        return tensorFromPinnedBuffer(type, buffer, dims);\n    }\n    // #endregion\n    // #region conversions\n    toDataURL(options) {\n        return tensorToDataURL(this, options);\n    }\n    toImageData(options) {\n        return tensorToImageData(this, options);\n    }\n    // #endregion\n    // #region properties\n    get data() {\n        this.ensureValid();\n        if (!this.cpuData) {\n            throw new Error('The data is not on CPU. Use `getData()` to download GPU data to CPU, ' +\n                'or use `texture` or `gpuBuffer` property to access the GPU data directly.');\n        }\n        return this.cpuData;\n    }\n    get location() {\n        return this.dataLocation;\n    }\n    get texture() {\n        this.ensureValid();\n        if (!this.gpuTextureData) {\n            throw new Error('The data is not stored as a WebGL texture.');\n        }\n        return this.gpuTextureData;\n    }\n    get gpuBuffer() {\n        this.ensureValid();\n        if (!this.gpuBufferData) {\n            throw new Error('The data is not stored as a WebGPU buffer.');\n        }\n        return this.gpuBufferData;\n    }\n    get mlTensor() {\n        this.ensureValid();\n        if (!this.mlTensorData) {\n            throw new Error('The data is not stored as a WebNN MLTensor.');\n        }\n        return this.mlTensorData;\n    }\n    // #endregion\n    // #region methods\n    async getData(releaseData) {\n        this.ensureValid();\n        switch (this.dataLocation) {\n            case 'cpu':\n            case 'cpu-pinned':\n                return this.data;\n            case 'texture':\n            case 'gpu-buffer':\n            case 'ml-tensor': {\n                if (!this.downloader) {\n                    throw new Error('The current tensor is not created with a specified data downloader.');\n                }\n                if (this.isDownloading) {\n                    throw new Error('The current tensor is being downloaded.');\n                }\n                try {\n                    this.isDownloading = true;\n                    const data = await this.downloader();\n                    this.downloader = undefined;\n                    this.dataLocation = 'cpu';\n                    this.cpuData = data;\n                    if (releaseData && this.disposer) {\n                        this.disposer();\n                        this.disposer = undefined;\n                    }\n                    return data;\n                }\n                finally {\n                    this.isDownloading = false;\n                }\n            }\n            default:\n                throw new Error(`cannot get data from location: ${this.dataLocation}`);\n        }\n    }\n    dispose() {\n        if (this.isDownloading) {\n            throw new Error('The current tensor is being downloaded.');\n        }\n        if (this.disposer) {\n            this.disposer();\n            this.disposer = undefined;\n        }\n        this.cpuData = undefined;\n        this.gpuTextureData = undefined;\n        this.gpuBufferData = undefined;\n        this.mlTensorData = undefined;\n        this.downloader = undefined;\n        this.isDownloading = undefined;\n        this.dataLocation = 'none';\n    }\n    // #endregion\n    // #region tensor utilities\n    ensureValid() {\n        if (this.dataLocation === 'none') {\n            throw new Error('The tensor is disposed.');\n        }\n    }\n    reshape(dims) {\n        this.ensureValid();\n        if (this.downloader || this.disposer) {\n            throw new Error('Cannot reshape a tensor that owns GPU resource.');\n        }\n        return tensorReshape(this, dims);\n    }\n}\n//# sourceMappingURL=tensor-impl.js.map"],"names":[],"mappings":"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","x_google_ignoreList":[0]}