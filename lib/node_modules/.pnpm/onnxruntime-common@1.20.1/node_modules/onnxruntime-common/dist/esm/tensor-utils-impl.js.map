{"version":3,"file":"tensor-utils-impl.js","sources":["../../../../../../../../node_modules/.pnpm/onnxruntime-common@1.20.1/node_modules/onnxruntime-common/dist/esm/tensor-utils-impl.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { Tensor } from './tensor-impl.js';\n/**\n * calculate size from dims.\n *\n * @param dims the dims array. May be an illegal input.\n */\nexport const calculateSize = (dims) => {\n    let size = 1;\n    for (let i = 0; i < dims.length; i++) {\n        const dim = dims[i];\n        if (typeof dim !== 'number' || !Number.isSafeInteger(dim)) {\n            throw new TypeError(`dims[${i}] must be an integer, got: ${dim}`);\n        }\n        if (dim < 0) {\n            throw new RangeError(`dims[${i}] must be a non-negative integer, got: ${dim}`);\n        }\n        size *= dim;\n    }\n    return size;\n};\n/**\n * implementation of Tensor.reshape()\n */\nexport const tensorReshape = (tensor, dims) => {\n    switch (tensor.location) {\n        case 'cpu':\n            return new Tensor(tensor.type, tensor.data, dims);\n        case 'cpu-pinned':\n            return new Tensor({\n                location: 'cpu-pinned',\n                data: tensor.data,\n                type: tensor.type,\n                dims,\n            });\n        case 'texture':\n            return new Tensor({\n                location: 'texture',\n                texture: tensor.texture,\n                type: tensor.type,\n                dims,\n            });\n        case 'gpu-buffer':\n            return new Tensor({\n                location: 'gpu-buffer',\n                gpuBuffer: tensor.gpuBuffer,\n                type: tensor.type,\n                dims,\n            });\n        case 'ml-tensor':\n            return new Tensor({\n                location: 'ml-tensor',\n                mlTensor: tensor.mlTensor,\n                type: tensor.type,\n                dims,\n            });\n        default:\n            throw new Error(`tensorReshape: tensor location ${tensor.location} is not supported`);\n    }\n};\n//# sourceMappingURL=tensor-utils-impl.js.map"],"names":[],"mappings":";;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACY,MAAC,aAAa,GAAG,CAAC,IAAI,KAAK;AACvC,IAAI,IAAI,IAAI,GAAG,CAAC;AAChB,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAC1C,QAAQ,MAAM,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC;AAC3B,QAAQ,IAAI,OAAO,GAAG,KAAK,QAAQ,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,GAAG,CAAC,EAAE;AACnE,YAAY,MAAM,IAAI,SAAS,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,2BAA2B,EAAE,GAAG,CAAC,CAAC,CAAC;AAC7E;AACA,QAAQ,IAAI,GAAG,GAAG,CAAC,EAAE;AACrB,YAAY,MAAM,IAAI,UAAU,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,uCAAuC,EAAE,GAAG,CAAC,CAAC,CAAC;AAC1F;AACA,QAAQ,IAAI,IAAI,GAAG;AACnB;AACA,IAAI,OAAO,IAAI;AACf;AACA;AACA;AACA;AACY,MAAC,aAAa,GAAG,CAAC,MAAM,EAAE,IAAI,KAAK;AAC/C,IAAI,QAAQ,MAAM,CAAC,QAAQ;AAC3B,QAAQ,KAAK,KAAK;AAClB,YAAY,OAAO,IAAI,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC;AAC7D,QAAQ,KAAK,YAAY;AACzB,YAAY,OAAO,IAAI,MAAM,CAAC;AAC9B,gBAAgB,QAAQ,EAAE,YAAY;AACtC,gBAAgB,IAAI,EAAE,MAAM,CAAC,IAAI;AACjC,gBAAgB,IAAI,EAAE,MAAM,CAAC,IAAI;AACjC,gBAAgB,IAAI;AACpB,aAAa,CAAC;AACd,QAAQ,KAAK,SAAS;AACtB,YAAY,OAAO,IAAI,MAAM,CAAC;AAC9B,gBAAgB,QAAQ,EAAE,SAAS;AACnC,gBAAgB,OAAO,EAAE,MAAM,CAAC,OAAO;AACvC,gBAAgB,IAAI,EAAE,MAAM,CAAC,IAAI;AACjC,gBAAgB,IAAI;AACpB,aAAa,CAAC;AACd,QAAQ,KAAK,YAAY;AACzB,YAAY,OAAO,IAAI,MAAM,CAAC;AAC9B,gBAAgB,QAAQ,EAAE,YAAY;AACtC,gBAAgB,SAAS,EAAE,MAAM,CAAC,SAAS;AAC3C,gBAAgB,IAAI,EAAE,MAAM,CAAC,IAAI;AACjC,gBAAgB,IAAI;AACpB,aAAa,CAAC;AACd,QAAQ,KAAK,WAAW;AACxB,YAAY,OAAO,IAAI,MAAM,CAAC;AAC9B,gBAAgB,QAAQ,EAAE,WAAW;AACrC,gBAAgB,QAAQ,EAAE,MAAM,CAAC,QAAQ;AACzC,gBAAgB,IAAI,EAAE,MAAM,CAAC,IAAI;AACjC,gBAAgB,IAAI;AACpB,aAAa,CAAC;AACd,QAAQ;AACR,YAAY,MAAM,IAAI,KAAK,CAAC,CAAC,+BAA+B,EAAE,MAAM,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC;AACjG;AACA;;;;","x_google_ignoreList":[0]}